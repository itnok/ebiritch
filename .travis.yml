language: python
env:
  global:
    - HOMEBREW_NO_AUTO_UPDATE=1
# Test for multiple Python versions on several OSes!
jobs:
  include:
    - os: linux
      dist: focal
      python: 3.9
    - os: linux
      dist: focal
      python: 3.8
    - os: linux
      dist: bionic
      python: 3.9
    - os: linux
      dist: bionic
      python: 3.8
    - os: linux
      dist: bionic
      python: 3.7
    - os: linux
      dist: bionic
      python: 3.6
    - os: osx
      # macOS 10.15.7
      osx_image: xcode12.2
      language: generic
      env: PYTHON=3.9
    - os: osx
      # macOS 10.15.7
      osx_image: xcode12.2
      language: generic
      env: PYTHON=3.8
    - os: osx
      # macOS 10.15.7
      osx_image: xcode12.2
      language: generic
      env: PYTHON=3.7
    - os: osx
      # macOS 10.15.7
      osx_image: xcode12.2
      language: generic
      env: PYTHON=3.6
    - os: osx
      # macOS 10.14.6
      osx_image: xcode11.3
      language: generic
      env: PYTHON=3.8
    - os: osx
      # macOS 10.14.6
      osx_image: xcode11.3
      language: generic
      env: PYTHON=3.7
    - os: osx
      # macOS 10.14.6
      osx_image: xcode11.3
      language: generic
      env: PYTHON=3.6
# Take care of requirements even before the installation step
before_install:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
    # Per the `pyenv homebrew recommendations <https://github.com/yyuu/pyenv/wiki#suggested-build-environment>`_.
    brew install openssl readline
    # See https://docs.travis-ci.com/user/osx-ci-environment/#A-note-on-upgrading-packages.
    # Did not really follow what is above because it works and am lazy.
    brew outdated pyenv || brew upgrade pyenv
    # Build a list of all stable versions
    # of Python starting with ``${PYTHON}``
    export PYTHON_AVAILABLE_VERSIONS=$(pyenv install --list | \
    egrep "^ *[0-9]" | \
    xargs | tr ' ' '\n' | \
    grep "^${PYTHON}" | \
    grep -v "[a-z]" | \
    sort -V)
    echo "PYTHON_AVAILABLE_VERSIONS for ${PYTHON}.x are:"
    echo "${PYTHON_AVAILABLE_VERSIONS}"
    pyenv install $(echo "${PYTHON_AVAILABLE_VERSIONS}" | tail -n1)
    # Would have expected something like ``pyenv init; pyenv local ${PYTHON}`` or
    # ``pyenv shell ${PYTHON}`` would work, but ``pyenv init`` doesn't seem to
    # modify the BASH environment, hence hand-set the variables instead.
    export PYENV_VERSION=$(echo "${PYTHON_AVAILABLE_VERSIONS}" | tail -n1)
    export PATH="${HOME}/.pyenv/shims:${PATH}"
    python3 -m venv travis-venv
    source travis-venv/bin/activate
    fi
  # A manual check that the correct version of Python is running.
  - python3 --version
# Install required packages for both production & testing
install:
  - python3 -m pip install -r requirements.txt
  - python3 -m pip install -r requirements_test.txt
script:
  - find .
    -name "*.py"
    -not -path "./travis-venv/*"
    -exec pylint {} + || travis_terminate 1
  - coverage run test/test_main.py || travis_terminate 1
# Print coverage stats & push the results back to codecov
after_success:
  - coverage report
  - codecov
